import streamlit as st
from utils import load_all_excels, semantic_search, keyword_search

st.set_page_config(page_title="–§–õ –ß–∞—Ç-–±–æ—Ç", layout="centered")
st.title("ü§ñ –ß–∞—Ç-–±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ñ—Ä–∞–∑–∞–º")

@st.cache_data
def get_data():
    df = load_all_excels()
    from utils import get_model
    model = get_model()
    df.attrs['phrase_embs'] = model.encode(df['phrase_proc'].tolist(), convert_to_tensor=True)
    return df

df = get_data()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, –∫ –∫–∞–∫–∏–º —Ç–µ–º–∞—Ç–∏–∫–∞–º –æ–Ω–∞ –º–æ–∂–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç—å—Å—è."}
    ]

# –í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
query = st.chat_input("–ù–∞–ø–∏—à–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")

if query:
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    st.session_state.messages.append({"role": "user", "content": query})
    with st.chat_message("user"):
        st.markdown(query)

    try:
        semantic_results = semantic_search(query, df)
        keyword_results = keyword_search(query, df)

        response = ""

        if semantic_results:
            response += "### üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫:\n"
            for score, phrase_full, topics, comment in semantic_results:
                response += f"- üß† **{phrase_full}** (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.2f})\n"
                response += f"  üîñ –¢–µ–º—ã: `{', '.join(topics)}`\n"
                if comment and str(comment).strip().lower() != "nan":
                    response += f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment.strip()}\n"
        else:
            response += "ü§î –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —É–º–Ω–æ–º –ø–æ–∏—Å–∫–µ.\n"

        if keyword_results:
            response += "\n### üß∑ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫:\n"
            for phrase, topics, comment in keyword_results:
                response += f"- üìå **{phrase}**\n"
                response += f"  üîñ –¢–µ–º—ã: `{', '.join(topics)}`\n"
                if comment and str(comment).strip().lower() != "nan":
                    response += f"  üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment.strip()}\n"
        else:
            response += "\nüßê –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ."

    except Exception as e:
        response = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    st.session_state.messages.append({"role": "assistant", "content": response})
    with st.chat_message("assistant"):
        st.markdown(response)
